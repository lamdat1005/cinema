package models.distributor;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import base.ThucThe;
import enums.TrangThaiHopDong;
import interfaces.ILichSu;
import interfaces.IThongBao;
import interfaces.IThongKe;
import models.contract.HopDongCungCap;

public class NhaPhanPhoi extends ThucThe implements IThongBao, ILichSu, IThongKe {
    private String diaChi;
    private String soDienThoai;
    private String email;
    private List<HopDongCungCap> danhSachHopDong;
    private List<String> lichSuGiaoDich;
    public NhaPhanPhoi(String ma, String ten, String diaChi, String soDienThoai, String email) {
        super(ma, ten);
        this.diaChi = validDiaChi(diaChi);
        this.soDienThoai = validSoDienThoai(soDienThoai);
        this.email = validEmail(email);
        this.danhSachHopDong = new ArrayList<>();
        this.lichSuGiaoDich = new ArrayList<>();
    }

    private String validSoDienThoai(String sdt){
        if(sdt == null || !sdt.matches("^[0-9]{10}$")){
            //Ph∆∞∆°ng th·ª©c matches() c·ªßa l·ªõp String ki·ªÉm tra xem to√†n b·ªô chu·ªói c√≥ kh·ªõp v·ªõi m·∫´u regex hay kh√¥ng.
            //^	B·∫Øt ƒë·∫ßu chu·ªói
            // [0-9]	Cho ph√©p k√Ω t·ª± l√† ch·ªØ s·ªë t·ª´ 0 ƒë·∫øn 9
            // {10}	Ph·∫£i c√≥ ch√≠nh x√°c 10 k√Ω t·ª± (10 ch·ªØ s·ªë)
            // $	K·∫øt th√∫c chu·ªói
            throw new IllegalArgumentException("So dien thoai khong hop le");
            //IllegalArgumentException l√† m·ªôt lo·∫°i ngo·∫°i l·ªá ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ch·ªâ ra r·∫±ng m·ªôt ph∆∞∆°ng th·ª©c ƒë√£ nh·∫≠n ƒë∆∞·ª£c m·ªôt ƒë·ªëi s·ªë kh√¥ng h·ª£p l·ªá
        }
        return sdt;
    }
    private String validDiaChi(String diaChi){
        if(diaChi == null || diaChi.trim().isEmpty()){
            throw new IllegalArgumentException("Dia chi khong duoc de trong");
        }
        return diaChi.trim();
    }
    private String validEmail(String email){
        if(email == null || !email.matches("^[A-Za-z0-9+_.-]+@(.+)$")){
            //Ph∆∞∆°ng th·ª©c matches() c·ªßa l·ªõp String ki·ªÉm tra xem to√†n b·ªô chu·ªói c√≥ kh·ªõp v·ªõi m·∫´u regex hay kh√¥ng.
            // ^	B·∫Øt ƒë·∫ßu chu·ªói
            // [A-Za-z0-9+_.-]	Cho ph√©p c√°c k√Ω t·ª± ch·ªØ c√°i (ch·ªØ hoa v√† ch·ªØ th∆∞·ªùng), ch·ªØ s·ªë v√† c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát +, _, ., -
            // +	Ph·∫£i c√≥ √≠t nh·∫•t m·ªôt k√Ω t·ª± t·ª´ t·∫≠p h·ª£p tr√™n
            // @	K√Ω t·ª± @ ph·∫£i xu·∫•t hi·ªán trong chu·ªói
            // (.+)	Ph·∫ßn sau @ ph·∫£i c√≥ √≠t nh·∫•t m·ªôt k√Ω t·ª± (c√≥ th·ªÉ l√† t√™n mi·ªÅn)
            // $	K·∫øt th√∫c chu·ªói
            throw new IllegalArgumentException("Email khong hop le");
        }
        return email;
    }
    public void themHopDong(HopDongCungCap hopDong){
        if(hopDong == null){
            throw new IllegalArgumentException("Hop dong khong duoc de trong");
            //IllegalArgumentException l√† m·ªôt lo·∫°i ngo·∫°i l·ªá ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ch·ªâ ra r·∫±ng m·ªôt ph∆∞∆°ng th·ª©c ƒë√£ nh·∫≠n ƒë∆∞·ª£c m·ªôt ƒë·ªëi s·ªë kh√¥ng h·ª£p l·ªá
        }
        danhSachHopDong.add(hopDong);
        themLichSu("Them hop dong: " + hopDong.getMaHopDong());
        capNhatThoiGian();
    }
    // Implement IThongBao
    @Override
    public void guiThongBao(String thongBao) {
        System.out.println("üîî [NPP] " + ma + ": " + thongBao);
        themLichSu("Nhan thong bao: " + thongBao);
    }

    @Override
    public void guiEmail(String emailNhan, String message){
        System.out.println("üìß Email tu " + email + " den " + emailNhan + ": " + message);
        themLichSu("Gui email den " + emailNhan + ": ");
    }

    @Override
    public void guiSMS(String soDienThoai, String message){
        System.out.println("üì± SMS tu " + this.soDienThoai + " den " + soDienThoai + ": " + message);
        themLichSu("Gui SMS den " + soDienThoai + ": ");
    }
    

    // Implement ILichSu
    @Override
    public void themLichSu(String hanhdong){
        String lichSu = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy--MM-dd:ss")) + " - " + hanhdong;
    //LocalDateTime.now() l·∫•y th·ªùi gian hi·ªán t·∫°i
    //DateTimeFormatter.ofPattern("yyyy--MM-dd:ss") ƒë·ªãnh d·∫°ng th·ªùi gian theo m·∫´u "nƒÉm-th√°ng-ng√†y:gi√¢y"
        lichSuGiaoDich.add(lichSu);}

    @Override
    public List<String> xemLichSu(){
        return new ArrayList<>(lichSuGiaoDich);
        //Tr·∫£ v·ªÅ m·ªôt b·∫£n sao c·ªßa danh s√°ch l·ªãch s·ª≠ giao d·ªãch ƒë·ªÉ tr√°nh vi·ªác b√™n ngo√†i c√≥ th·ªÉ s·ª≠a ƒë·ªïi tr·ª±c ti·∫øp danh s√°ch g·ªëc
    }
    
    public void xoaLichSu(){
        lichSuGiaoDich.clear();
        System.out.println("Da xoa lich su giao dich cua NPP " + ma);
    }

    // Implement IThongKe
    @Override
    public Map<String, Integer> thongKeTheoLoai(){
        Map<String, Integer> thongKe = new HashMap<>();
        thongKe.put("Tong so hop dong", danhSachHopDong.size());

        int hdHieuLuc = 0;

        for(HopDongCungCap hd : danhSachHopDong){
            if(hd.getTrangThai() == TrangThaiHopDong.DANG_HIEU_LUC){
                hdHieuLuc++;
            }
        }
        thongKe.put("Hop dong dang hieu luc", hdHieuLuc);
        return thongKe;
    }

    @Override
    public Map<String, Double> thongKeDoanhThu(){
        Map<String, Double> doanhThu = new HashMap<>();
        // d√πng ƒë·ªÉ l∆∞u tr·ªØ doanh thu v·ªõi kh√≥a l√† lo·∫°i doanh thu v√† gi√° tr·ªã l√† s·ªë ti·ªÅn t∆∞∆°ng ·ª©ng
        //HashMap l√† m·ªôt tri·ªÉn khai c·ª• th·ªÉ c·ªßa giao di·ªán Map trong Java, s·ª≠ d·ª•ng b·∫£ng bƒÉm ƒë·ªÉ l∆∞u tr·ªØ c√°c c·∫∑p kh√≥a-gi√° tr·ªã.
        //b·∫£ng bƒÉm (hash table) l√† m·ªôt c·∫•u tr√∫c d·ªØ li·ªáu cho ph√©p l∆∞u tr·ªØ v√† truy xu·∫•t d·ªØ li·ªáu m·ªôt c√°ch nhanh ch√≥ng d·ª±a tr√™n kh√≥a.
        double tongGiaTri = 0;
        for(HopDongCungCap hd : danhSachHopDong){
            tongGiaTri += hd.tinhTongGiaTri();
        }
        doanhThu.put("Tong gia tri hop dong", tongGiaTri);
        return doanhThu;

    }

    @Override
    public int demSoLuong(){
        return danhSachHopDong.size();
    }

    @Override
    public void hienThiThongTin(){
        System.out.println("Nha Phan Phoi: " + ma + " - " + ten);
        System.out.println("Dia Chi: " + diaChi);
        System.out.println("So Dien Thoai: " + soDienThoai);
        System.out.println("Email: " + email);
        System.out.println("So Hop Dong: " + danhSachHopDong.size());
    }

    public String getSoDienThoai(){
        return soDienThoai;
    }

    public String getDiaChi(){
        return diaChi;
    }
    public String getEmail(){
        return email;
    }
    public List<HopDongCungCap> getDanhSachHopDong(){
        return Collections.unmodifiableList(danhSachHopDong);
        //Tr·∫£ v·ªÅ m·ªôt danh s√°ch kh√¥ng th·ªÉ s·ª≠a ƒë·ªïi ƒë·ªÉ tr√°nh vi·ªác b√™n ngo√†i c√≥ th·ªÉ thay ƒë·ªïi tr·ª±c ti·∫øp danh s√°ch g·ªëc
    }

    @Override
    public boolean kiemTraHopLe() {
        try {
            validDiaChi(diaChi);
            validSoDienThoai(soDienThoai);
            validEmail(email);
            return true;
        } catch (IllegalArgumentException e) {
            return false;
        }
    }
}
